DROP TABLE ECHIPA_SPONSOR_F1;
DROP TABLE PILOT_CURSA_F1;
DROP TABLE BILET_F1;
DROP TABLE CURSA_F1;
DROP TABLE CIRCUIT_F1;
DROP TABLE PILOT_F1;
DROP TABLE SPONSOR_F1;
DROP TABLE TIP_BILET_F1;
DROP TABLE VEHICUL_F1;
DROP TABLE ECHIPA_F1;
DROP TABLE MODEL_F1;
DROP TABLE ARENA_F1;


DROP SEQUENCE tip_bilet_seq;
DROP SEQUENCE pilot_seq;
DROP SEQUENCE echipa_seq;
DROP SEQUENCE circuit_seq;
DROP SEQUENCE arena_seq;

CREATE SEQUENCE tip_bilet_seq;
CREATE SEQUENCE pilot_seq;
CREATE SEQUENCE echipa_seq;
CREATE SEQUENCE circuit_seq;
CREATE SEQUENCE arena_seq;

---------------------------------------------------------

CREATE TABLE ARENA_F1 (
    id_arena INT PRIMARY KEY,
    capacitate INT,
    tribune INT,
    parcare VARCHAR(3),
    restaurante INT,
    zona_acoperita VARCHAR(3)
);


CREATE TABLE CIRCUIT_F1 (
    id_circuit INT PRIMARY KEY,
    nume VARCHAR(100),
    locatie VARCHAR(100),
    lungime FLOAT,
    viraje INT,
    drs_zone INT,
    id_arena INT,
    FOREIGN KEY (id_arena) REFERENCES ARENA_F1(id_arena)
);

CREATE TABLE MODEL_F1 (
    id_model INT PRIMARY KEY,
    putere INT
);

CREATE TABLE ECHIPA_F1 (
    id_echipa INT PRIMARY KEY,
    nume VARCHAR(100),
    puncte INT,
    sediu VARCHAR(100),
    nr_angajati INT,
    buget INT
);

CREATE TABLE VEHICUL_F1 (
    id_vehicul INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    greutate FLOAT,
    pret INT,
    pneuri VARCHAR(10),
    id_model INT,
    id_echipa INT,
    FOREIGN KEY (id_model) REFERENCES MODEL_F1(id_model),
    FOREIGN KEY (id_echipa) REFERENCES ECHIPA_F1(id_echipa)
);

CREATE TABLE TIP_BILET_F1 (
    id_tip_bilet INT PRIMARY KEY,
    tip VARCHAR(20),
    pret FLOAT
);

CREATE TABLE CURSA_F1 (
    id_cursa INT PRIMARY KEY,
    data DATE,
    durata VARCHAR(8),
    record VARCHAR(9),
    tip_cursa VARCHAR(50),
    vreme VARCHAR(50),
    id_circuit INT,
    FOREIGN KEY (id_circuit) REFERENCES CIRCUIT_F1(id_circuit)
);

CREATE TABLE BILET_F1 (
    id_bilet INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_tip_bilet INT,
    loc_tribuna VARCHAR(2),
    loc_rand INT,
    loc_numar INT,
    stare VARCHAR(20),
    id_cursa INT,
    FOREIGN KEY (id_tip_bilet) REFERENCES TIP_BILET_F1(id_tip_bilet),
    FOREIGN KEY (id_cursa) REFERENCES CURSA_F1(id_cursa)
);

CREATE TABLE SPONSOR_F1 (
    id_sponsor INT PRIMARY KEY,
    nume VARCHAR(100),
    contributie_financiara INT,
    tip_parteneriat VARCHAR(50)
);

CREATE TABLE PILOT_F1 (
    id_pilot INT PRIMARY KEY,
    nume VARCHAR(50),
    prenume VARCHAR(50),
    data_nastere DATE,
    nationalitate VARCHAR(50),
    salariu INT,
    titluri INT,
    id_echipa INT,
    FOREIGN KEY (id_echipa) REFERENCES ECHIPA_F1(id_echipa)
);

CREATE TABLE PILOT_CURSA_F1 (
    id_pilot INT NOT NULL,
    id_cursa INT NOT NULL,
    PRIMARY KEY (id_pilot, id_cursa), 
    FOREIGN KEY (id_pilot) REFERENCES PILOT_F1(id_pilot),
    FOREIGN KEY (id_cursa) REFERENCES CURSA_F1(id_cursa)
);

CREATE TABLE ECHIPA_SPONSOR_F1 (
    id_echipa INT,
    id_sponsor INT,
    PRIMARY KEY (id_echipa, id_sponsor), 
    FOREIGN KEY (id_echipa) REFERENCES ECHIPA_F1(id_echipa),
    FOREIGN KEY (id_sponsor) REFERENCES SPONSOR_F1(id_sponsor)
);

------------------------------------------

CREATE SEQUENCE arena_seq 
START WITH 1 INCREMENT BY 1;

INSERT INTO ARENA_F1 VALUES (arena_seq.NEXTVAL, 100000, 50, 'DA', 10, 'DA');
INSERT INTO ARENA_F1 VALUES (arena_seq.NEXTVAL, 80000, 40, 'NU', 8, 'DA');
INSERT INTO ARENA_F1 VALUES (arena_seq.NEXTVAL, 90000, 45, 'DA', 12, 'NU');
INSERT INTO ARENA_F1 VALUES (arena_seq.NEXTVAL, 70000, 35, 'NU', 7, 'DA');
INSERT INTO ARENA_F1 VALUES (arena_seq.NEXTVAL, 85000, 48, 'DA', 9, 'DA');
INSERT INTO ARENA_F1 VALUES (arena_seq.NEXTVAL, 75000, 38, 'DA', 11, 'NU');
INSERT INTO ARENA_F1 VALUES (arena_seq.NEXTVAL, 65000, 30, 'NU', 5, 'DA');
INSERT INTO ARENA_F1 VALUES (arena_seq.NEXTVAL, 78000, 42, 'DA', 10, 'DA');
INSERT INTO ARENA_F1 VALUES (arena_seq.NEXTVAL, 82000, 44, 'NU', 6, 'NU');
INSERT INTO ARENA_F1 VALUES (arena_seq.NEXTVAL, 90000, 50, 'DA', 13, 'DA');

SELECT * FROM ARENA_F1;

CREATE SEQUENCE circuit_seq 
START WITH 1 INCREMENT BY 1;

INSERT INTO CIRCUIT_F1 VALUES (circuit_seq.NEXTVAL, 'Silverstone', 'UK', 5.891, 18, 2, 1);
INSERT INTO CIRCUIT_F1 VALUES (circuit_seq.NEXTVAL, 'Monza', 'Italy', 5.793, 11, 1, 2);
INSERT INTO CIRCUIT_F1 VALUES (circuit_seq.NEXTVAL, 'Spa-Francorchamps', 'Belgium', 7.004, 19, 2, 3);
INSERT INTO CIRCUIT_F1 VALUES (circuit_seq.NEXTVAL, 'Suzuka', 'Japan', 5.807, 18, 2, 4);
INSERT INTO CIRCUIT_F1 VALUES (circuit_seq.NEXTVAL, 'Monaco', 'Monaco', 3.337, 19, 1, 5);
INSERT INTO CIRCUIT_F1 VALUES (circuit_seq.NEXTVAL, 'Barcelona', 'Spain', 4.655, 16, 1, 6);
INSERT INTO CIRCUIT_F1 VALUES (circuit_seq.NEXTVAL, 'Melbourne', 'Australia', 5.303, 16, 1, 7);
INSERT INTO CIRCUIT_F1 VALUES (circuit_seq.NEXTVAL, 'Interlagos', 'Brazil', 4.309, 15, 1, 8);
INSERT INTO CIRCUIT_F1 VALUES (circuit_seq.NEXTVAL, 'Silverstone Short', 'UK', 3.660, 12, 0, 9);
INSERT INTO CIRCUIT_F1 VALUES (circuit_seq.NEXTVAL, 'Austin', 'USA', 5.513, 20, 2, 10);

SELECT * FROM CIRCUIT_F1;

INSERT INTO MODEL_F1 VALUES
(1, 950),
(2, 900),
(3, 980),
(4, 970),
(5, 960),
(6, 940),
(7, 930),
(8, 920),
(9, 910),
(10, 900);

SELECT * FROM MODEL_F1;

CREATE SEQUENCE echipa_seq 
START WITH 1 INCREMENT BY 1;

INSERT INTO ECHIPA_F1 VALUES (echipa_seq.NEXTVAL, 'Mercedes', 450, 'UK', 200, 250000000);
INSERT INTO ECHIPA_F1 VALUES (echipa_seq.NEXTVAL, 'Red Bull', 420, 'Austria', 180, 230000000);
INSERT INTO ECHIPA_F1 VALUES (echipa_seq.NEXTVAL, 'Ferrari', 430, 'Italy', 190, 240000000);
INSERT INTO ECHIPA_F1 VALUES (echipa_seq.NEXTVAL, 'McLaren', 390, 'UK', 170, 200000000);
INSERT INTO ECHIPA_F1 VALUES (echipa_seq.NEXTVAL, 'Alpine', 350, 'France', 160, 180000000);

SELECT * FROM ECHIPA_F1;

CREATE SEQUENCE pilot_seq 
START WITH 1 INCREMENT BY 1;

INSERT INTO PILOT_F1 VALUES (pilot_seq.NEXTVAL, 'Hamilton', 'Lewis', '07-01-1985', 'British', 50000000, 7, 1);
INSERT INTO PILOT_F1 VALUES (pilot_seq.NEXTVAL, 'Russell', 'George', '15-02-1998', 'British', 15000000, 0, 1);
INSERT INTO PILOT_F1 VALUES (pilot_seq.NEXTVAL, 'Verstappen', 'Max', '30-09-1997', 'Dutch', 45000000, 3, 2);
INSERT INTO PILOT_F1 VALUES (pilot_seq.NEXTVAL, 'Perez', 'Sergio', '26-01-1990', 'Mexican', 18000000, 0, 2);
INSERT INTO PILOT_F1 VALUES (pilot_seq.NEXTVAL, 'Leclerc', 'Charles', '16-10-1997', 'Monegasque', 30000000, 0, 3);
INSERT INTO PILOT_F1 VALUES (pilot_seq.NEXTVAL, 'Sainz', 'Carlos', '01-09-1994', 'Spanish', 22000000, 0, 3);
INSERT INTO PILOT_F1 VALUES (pilot_seq.NEXTVAL, 'Norris', 'Lando', '13-11-1999', 'British', 14000000, 0, 4);
INSERT INTO PILOT_F1 VALUES (pilot_seq.NEXTVAL, 'Piastri', 'Oscar', '06-04-2001', 'Australian', 10000000, 0, 4);
INSERT INTO PILOT_F1 VALUES (pilot_seq.NEXTVAL, 'Alonso', 'Fernando', '29-07-1981', 'Spanish', 25000000, 2, 5);
INSERT INTO PILOT_F1 VALUES (pilot_seq.NEXTVAL, 'Ocon', 'Esteban', '17-09-1996', 'French', 15000000, 0, 5);

SELECT * FROM PILOT_F1;

INSERT INTO VEHICUL_F1 (greutate, pret, pneuri, id_model, id_echipa) VALUES
(752.5, 1500000, 'Soft', 1, 1),
(755.0, 1400000, 'Medium', 2, 1),
(753.0, 1480000, 'Hard', 3, 2),
(756.0, 1490000, 'Soft', 4, 2),
(750.0, 1510000, 'Medium', 5, 3),
(754.0, 1470000, 'Hard', 6, 3),
(749.0, 1460000, 'Soft', 7, 4),
(751.0, 1450000, 'Medium', 8, 4),
(753.5, 1440000, 'Hard', 9, 5),
(755.5, 1430000, 'Soft', 10, 5);

SELECT * FROM VEHICUL_F1;

CREATE SEQUENCE tip_bilet_seq 
START WITH 1 INCREMENT BY 1;

INSERT INTO TIP_BILET_F1 VALUES (tip_bilet_seq.NEXTVAL, 'VIP', 300.0);
INSERT INTO TIP_BILET_F1 VALUES (tip_bilet_seq.NEXTVAL, 'Exclusive', 200.0);
INSERT INTO TIP_BILET_F1 VALUES (tip_bilet_seq.NEXTVAL, 'Gold', 150.0);
INSERT INTO TIP_BILET_F1 VALUES (tip_bilet_seq.NEXTVAL, 'Silver', 100.0);
INSERT INTO TIP_BILET_F1 VALUES (tip_bilet_seq.NEXTVAL, 'Bronze', 50.0);

SELECT * FROM TIP_BILET_F1;

INSERT INTO CURSA_F1 VALUES
(1, DATE '2025-06-15', '01:30:00', '1:25.345', 'Grand Prix', 'Soare', 1),
(2, DATE '2025-07-20', '01:40:00', '1:28.234', 'Sprint', 'Nori', 2),
(3, DATE '2025-08-10', '01:35:00', '1:26.789', 'Grand Prix', 'Soare', 3),
(4, DATE '2025-09-05', '01:50:00', '1:29.101', 'Grand Prix', 'Ploaie', 4),
(5, DATE '2025-10-12', '01:45:00', '1:27.456', 'Sprint', 'Nori', 5),
(6, DATE '2025-11-18', '01:38:00', '1:28.789', 'Grand Prix', 'Soare', 6),
(7, DATE '2025-12-08', '01:42:00', '1:30.123', 'Grand Prix', 'Ceata', 7),
(8, DATE '2026-01-15', '01:36:00', '1:27.890', 'Sprint', 'Soare', 8),
(9, DATE '2026-02-20', '01:34:00', '1:26.345', 'Grand Prix', 'Nori', 9),
(10, DATE '2026-03-25', '01:39:00', '1:29.567', 'Sprint', 'Ploaie', 10);

SELECT * FROM CURSA_F1;

INSERT INTO BILET_F1 (id_tip_bilet, loc_tribuna, loc_rand, loc_numar, stare, id_cursa) VALUES
(1, 'A1', 1, 1, 'VANDUT', 1),
(2, 'A2', 1, 2, 'LIBER', 1),
(3, 'A3', 1, 3, 'REZERVAT', 2),
(4, 'B1', 2, 1, 'VANDUT', 2),
(5, 'B2', 2, 2, 'LIBER', 3),
(1, 'B3', 2, 3, 'REZERVAT', 3),
(2, 'C1', 3, 1, 'VANDUT', 4),
(3, 'C2', 3, 2, 'LIBER', 4),
(4, 'C3', 3, 3, 'REZERVAT', 5),
(5, 'D1', 4, 1, 'VANDUT', 5);

SELECT * FROM BILET_F1;

INSERT INTO SPONSOR_F1 VALUES
(1, 'Petronas', 5000000, 'Marketing'),
(2, 'Pirelli', 3000000, 'Strategic'),
(3, 'Red Bull GmbH', 8000000, 'Financiar'),
(4, 'Shell', 4500000, 'Exclusiv'),
(5, 'Mobil 1', 4000000, 'Marketing'),
(6, 'Tag Heuer', 2000000, 'Strategic'),
(7, 'Monster Energy', 3500000, 'Financiar'),
(8, 'Dell', 2800000, 'Exclusiv'),
(9, 'Honda', 6000000, 'Marketing'),
(10, 'Rolex', 5000000, 'Strategic');

SELECT * FROM SPONSOR_F1;

INSERT INTO PILOT_CURSA_F1 VALUES
(1, 1),(1, 2),(2, 1),(2, 3),(3, 2),(3, 4),(4, 3),(4, 5),(5, 4),(5, 6),
(6, 5),(6, 7),(7, 6),(7, 8),(8, 7),(8, 9),(9, 8),(9, 10),(10, 9),(10, 10);

SELECT * FROM PILOT_CURSA_F1;

INSERT INTO ECHIPA_SPONSOR_F1 VALUES
(1, 1),(1, 2),(2, 3),(2, 4),(3, 5),(3, 6),(4, 7),(4, 8),(5, 9),(5, 10),
(1, 3),(2, 5),(3, 7),(4, 9),(5, 1),(1, 4),(2, 6),(3, 8),(4, 10),(5, 2);

SELECT * FROM ECHIPA_SPONSOR_F1;

COMMIT;
------------------------------------------


-- EXERCITIUL 12

-- c) + d)
--sa se fiseaza echipele care au un numar de angajati mai mare decat media
-- echipelor si marcheaza daca bugetul este „mare” (>22.000.000), 
--„mediu” sau „mic” folosind DECODE, afisand si numarul de angajati (dacă e NULL, afiseaza 0).
SELECT E.nume,
       NVL(E.nr_angajati, 0) AS nr_angajati,
       DECODE(
         SIGN(E.buget - 22000000),
         1, 'mare',
         0, 'mediu',
         -1, 'mic'
       ) AS categorie_buget
FROM ECHIPA_F1 E
GROUP BY E.nume, E.nr_angajati, E.buget
HAVING E.nr_angajati>(
  SELECT AVG(nr_angajati) FROM ECHIPA_F1
);

-- e)
-- sa se afiseaze pentru fiecare pilot numele complet, initialele numelui,
-- varsta calculata in ani intregi si o clasificare
-- simplificata in functie de numarul de titluri obtinute.

SELECT 
    P.nume || ' ' || P.prenume AS nume_complet,
    SUBSTR(P.nume, 1, 1) || '.' || SUBSTR(P.prenume, 1, 1) AS initiale,
    TRUNC(MONTHS_BETWEEN(SYSDATE, P.data_nastere)/12) AS varsta,
    P.titluri,
    CASE 
        WHEN P.titluri >= 3 THEN 'Campion Experimentat'
        WHEN P.titluri BETWEEN 1 AND 2 THEN 'Pilot Promitator'
        ELSE 'Novice'
    END AS clasificare
FROM PILOT_F1 P;



-- f) 
-- sa se afiseaze echipele care au primit sponsorizari totale mai mari de 20000000.

WITH sponsorizari AS (
    SELECT ES.id_echipa, SUM(S.contributie_financiara) AS total
    FROM ECHIPA_SPONSOR_F1 ES
    JOIN SPONSOR_F1 S ON ES.id_sponsor=S.id_sponsor
    GROUP BY ES.id_echipa
)
SELECT E.nume AS echipa,
       S.total AS sponsorizare_totala
FROM sponsorizari S
JOIN ECHIPA_F1 E ON E.id_echipa=S.id_echipa
WHERE S.total>20000000;

----------------

--a)
--sa se afiseaze numele pilotului și nationalitatea sa, doar daca
--a participat la o cursa desfasurata pe un circuit care
-- are mai mult de 15 viraje si o capacitate de public
-- mai mare decat cea a arenei asociate circuitului „Monaco”.

SELECT P.nume || ' ' || P.prenume AS pilot,
       P.nationalitate
FROM PILOT_F1 P
WHERE EXISTS (
    SELECT 1
    FROM PILOT_CURSA_F1 PC
    JOIN CURSA_F1 C ON PC.id_cursa=C.id_cursa
    JOIN CIRCUIT_F1 CI ON C.id_circuit=CI.id_circuit
    JOIN ARENA_F1 A ON CI.id_arena=A.id_arena
    WHERE PC.id_pilot=P.id_pilot
      AND CI.viraje > 15
      AND A.capacitate > (
          SELECT A2.capacitate
          FROM CIRCUIT_F1 CI2
          JOIN ARENA_F1 A2 ON CI2.id_arena=A2.id_arena
          WHERE CI2.nume='Monaco'
      )
);

--b)
--sa se afiseaze pentru fiecare pilot numele complet, salariul, numele echipei
--din care face parte si media salariilor tuturor pilotilor
 
SELECT 
    P.nume || ' ' || P.prenume AS nume_complet,
    P.salariu,
    E.nume AS nume_echipa,
    avg_salariu.medie_salariu_piloti
FROM PILOT_F1 P,
     ECHIPA_F1 E,
     (SELECT AVG(salariu) AS medie_salariu_piloti FROM PILOT_F1) avg_salariu
WHERE P.id_echipa=E.id_echipa
ORDER BY P.nume;


---------------------------------------


-- EXERCITIUL 13

-- sa se actualizeaze salariul pilotilor care au salariul mai mic decat media salariilor
-- din echipa lor, marindu-l la media respectiva.

UPDATE PILOT_F1 P
SET salariu = (
    SELECT AVG(salariu)
    FROM PILOT_F1
    WHERE id_echipa=P.id_echipa
)
WHERE salariu<(
    SELECT AVG(salariu)
    FROM PILOT_F1
    WHERE id_echipa=P.id_echipa
);

-- sa se marcheze toate biletele tip 'Silver' la curse desfasurate
-- pe un circuit din 'Monaco' ca fiind 'VANDUT'

UPDATE BILET_F1 B
SET stare = 'VANDUT'
WHERE id_tip_bilet = (
    SELECT id_tip_bilet
    FROM TIP_BILET_F1
    WHERE tip='Silver'
)
AND id_cursa IN (
    SELECT id_cursa
    FROM CURSA_F1
    WHERE id_circuit IN (
        SELECT id_circuit
        FROM CIRCUIT_F1
        WHERE locatie='Monaco'
    )
);

-- sa se sterga vehiculele care au un model cu puterea sub medie
-- si apartin echipelor cu buget mai mic decat media, dar numai 
-- daca pretul vehiculului este mai mare de 1000000

DELETE FROM VEHICUL_F1 V
WHERE V.id_model IN (
    SELECT M.id_model
    FROM MODEL_F1 M
    WHERE M.putere<(SELECT AVG(putere) FROM MODEL_F1)
)
AND V.id_echipa IN (
    SELECT E.id_echipa
    FROM ECHIPA_F1 E
    WHERE E.buget<(SELECT AVG(buget) FROM ECHIPA_F1)
)
AND V.pret>1000000;

-- EXERCITIUL 14

DROP VIEW V_PILOTI_ECHIPA_STAT;

CREATE OR REPLACE VIEW V_PILOTI_ECHIPA_STAT AS
SELECT 
    P.id_pilot,
    P.nume || ' ' || P.prenume AS nume_pilot,
    E.nume AS echipa,
    P.salariu,
    ROUND(AVG(P2.salariu), 2) AS salariu_mediu_echipa,
    CASE 
        WHEN P.salariu < AVG(P2.salariu) THEN 'Sub medie'
        WHEN P.salariu > AVG(P2.salariu) THEN 'Peste medie'
        ELSE 'Egal cu media'
    END AS comparatie
FROM PILOT_F1 P
JOIN ECHIPA_F1 E ON P.id_echipa = E.id_echipa
JOIN PILOT_F1 P2 ON P2.id_echipa = P.id_echipa
GROUP BY P.id_pilot, P.nume, P.prenume, E.nume, P.salariu;

SELECT * FROM V_PILOTI_ECHIPA_STAT;

SELECT * 
FROM V_PILOTI_ECHIPA_STAT
WHERE comparatie = 'Sub medie';

-- OPERATIE LMD NEPERMISA :
-- UPDATE
-- Vizualizarea contine GROUP BY
-- Aceste coloane sunt calculate cu functii de agregare

UPDATE V_PILOTI_ECHIPA_STAT
SET salariu_mediu_echipa = 30000000
WHERE nume_pilot = 'Carlos Sainz';

-- EXERCITIUL 15

-- sa se afiseze pilotii care au participat la toate cursele din Italia
-- DIVISION


SELECT P.id_pilot, P.nume || ' ' || P.prenume as nume_pilot
FROM PILOT_F1 P
WHERE NOT EXISTS (
    SELECT C.id_cursa
    FROM CURSA_F1 C
    JOIN CIRCUIT_F1 CI ON C.id_circuit = CI.id_circuit
    WHERE CI.locatie = 'Italy'
    AND NOT EXISTS (
        SELECT 1
        FROM PILOT_CURSA_F1 PC
        WHERE PC.id_pilot = P.id_pilot
          AND PC.id_cursa = C.id_cursa
    )
);


-- OUTER JOIN

SELECT 
    C.id_cursa,
    TO_CHAR(C.data, 'DD-MON-YYYY') AS data_cursa,
    C.tip_cursa,
    CI.nume AS circuit,
    CI.locatie,
    A.capacitate AS capacitate_arena,
    COUNT(B.id_bilet) AS total_bilete,
    COUNT(B.stare = 'VANDUT') AS bilete_vandute,
    SUM(CASE WHEN B.stare = 'VANDUT' THEN TB.pret END) AS incasari_totale
    
FROM CURSA_F1 C
INNER JOIN CIRCUIT_F1 CI ON C.id_circuit = CI.id_circuit
LEFT OUTER JOIN ARENA_F1 A ON CI.id_arena = A.id_arena  
LEFT OUTER JOIN BILET_F1 B ON C.id_cursa = B.id_cursa
LEFT OUTER JOIN TIP_BILET_F1 TB ON B.id_tip_bilet = TB.id_tip_bilet

GROUP BY 
    C.id_cursa, C.data, C.tip_cursa, CI.nume, CI.locatie, A.capacitate

ORDER BY C.data;


-- Afiseaza toti pilotii, impreună cu:
-- numele echipei din care fac parte (chiar dacă nu au echipa),
-- cursele la care au participat (dacă exisat),
-- circuitul aferent fiecarei curse (dacă exista),
-- locatia circuitului.

SELECT 
    P.nume || ' ' || P.prenume AS pilot,
    E.nume AS echipa,
    C.id_cursa,
    CI.nume AS circuit,
    CI.locatie
FROM PILOT_F1 P
LEFT OUTER JOIN ECHIPA_F1 E ON P.id_echipa = E.id_echipa
LEFT OUTER JOIN PILOT_CURSA_F1 PC ON P.id_pilot = PC.id_pilot
LEFT OUTER JOIN CURSA_F1 C ON PC.id_cursa = C.id_cursa
LEFT OUTER JOIN CIRCUIT_F1 CI ON C.id_circuit = CI.id_circuit
ORDER BY P.nume;


-- TOP-N

-- top 5 piloti cu cele mai multe curse Grand Prix

SELECT ROWNUM AS pozitie,
       pilot,
       curse_grand_prix
FROM (
    SELECT 
        P.nume || ' ' || P.prenume AS pilot,
        COUNT(*) AS curse_grand_prix
    FROM PILOT_F1 P
    JOIN PILOT_CURSA_F1 PC ON P.id_pilot = PC.id_pilot
    JOIN CURSA_F1 C ON PC.id_cursa = C.id_cursa
    WHERE C.tip_cursa = 'Grand Prix'
    GROUP BY P.nume, P.prenume
    ORDER BY curse_grand_prix DESC
)
WHERE ROWNUM <= 5;


-- EXERCITIUL 16

-- sa se afiseze numele echipei si al pilotului pentru pilotii care au castigat cel putin un titlu si fac
-- parte dintr-o echipa cu buget mai mare decat media bugetelor si echipelor

SELECT E.nume AS nume_echipa, 
       P.nume AS nume_pilot
FROM 
    ECHIPA_F1 E
JOIN PILOT_F1 P ON E.id_echipa = P.id_echipa
WHERE P.titluri > 0
  AND E.buget > (SELECT AVG(buget) FROM ECHIPA_F1);

-- CEREREA DUPA OPTMIIZARE

WITH media AS (
    SELECT AVG(buget) AS avg_buget FROM ECHIPA_F1
)
SELECT E.nume AS nume_echipa, P.nume AS nume_pilot
FROM ECHIPA_F1 E
JOIN PILOT_F1 P ON E.id_echipa = P.id_echipa
WHERE E.buget > (SELECT avg_buget FROM media)
  AND P.titluri > 0;




